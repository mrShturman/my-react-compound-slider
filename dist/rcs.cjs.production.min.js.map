{"version":3,"file":"rcs.cjs.production.min.js","sources":["../src/Slider/utils.ts","../src/Slider/modes.ts","../src/utils.ts","../src/Rail/Rail.tsx","../src/Handles/Handles.tsx","../src/scales/LinearScale.ts","../src/Ticks/Ticks.tsx","../src/Tracks/Tracks.tsx","../src/scales/DiscreteScale.ts","../src/Slider/Slider.tsx"],"sourcesContent":["import React from 'react';\nimport warning from 'warning';\n\nimport { DiscreteScale } from '../scales/DiscreteScale';\nimport { HandleItem } from '../types';\n\nexport const prfx = 'my-react-compound-slider:';\n\nexport function getSortByVal(reversed: boolean = false) {\n  return function sortByVal(a: HandleItem, b: HandleItem) {\n    if (a.val > b.val) {\n      return reversed ? -1 : 1;\n    }\n\n    if (b.val > a.val) {\n      return reversed ? 1 : -1;\n    }\n\n    return 0;\n  };\n}\n\nexport function getUpdatedHandles(\n  handles: HandleItem[],\n  updateKey: string,\n  updateValue: number,\n  reversed: boolean = false\n) {\n  const index = handles.findIndex(v => v.key === updateKey);\n\n  if (index !== -1) {\n    const { key, val } = handles[index];\n\n    if (val === updateValue) {\n      return handles;\n    }\n\n    return [\n      ...handles.slice(0, index),\n      { key, val: updateValue },\n      ...handles.slice(index + 1),\n    ].sort(getSortByVal(reversed));\n  }\n\n  return handles;\n}\n\nexport function getSliderDomain(slider: Element | null, vertical: boolean) {\n  if (!slider) {\n    return [0, 0];\n  }\n\n  const s = slider.getBoundingClientRect();\n\n  const d0 = vertical ? s.top : s.left;\n  const d1 = vertical ? s.bottom : s.right;\n\n  return [d0, d1];\n}\n\nexport function isNotValidTouch({\n  type = '',\n  touches,\n}: {\n  type: string;\n  touches: TouchEvent['touches'];\n}) {\n  return (\n    !touches ||\n    touches.length > 1 ||\n    (type.toLowerCase() === 'touchend' && touches.length > 0)\n  );\n}\n\nexport function getTouchPosition(\n  vertical: boolean,\n  e: React.TouchEvent | TouchEvent\n) {\n  return vertical ? e.touches[0].clientY : e.touches[0].pageX;\n}\n\nexport function getHandles(\n  values: ReadonlyArray<number> = [],\n  reversed: boolean,\n  valueToStep: DiscreteScale,\n  warn: boolean\n) {\n  let changes = 0;\n\n  const handles = values\n    .map(x => {\n      const val = valueToStep.getValue(x);\n\n      if (x !== val) {\n        changes += 1;\n        warning(\n          !warn,\n          `${prfx} Invalid value encountered. Changing ${x} to ${val}.`\n        );\n      }\n\n      return val;\n    })\n    .map((val, i) => ({ key: `$$-${i}`, val }))\n    .sort(getSortByVal(reversed));\n\n  return { handles, changes };\n}\n","import { getUpdatedHandles } from './utils';\nimport { HandleItem } from '../types';\n\n// default mode\nexport function mode1(_: HandleItem[], next: HandleItem[]) {\n  return next;\n}\n\n// prevent duplicate values and crossing\nexport function mode2(curr: HandleItem[], next: HandleItem[]) {\n  for (let i = 0; i < curr.length; i++) {\n    if (curr[i].key !== next[i].key) {\n      return curr;\n    }\n\n    if (next[i + 1] && next[i].val === next[i + 1].val) {\n      return curr;\n    }\n  }\n\n  return next;\n}\n\n// pushable mode\nexport function mode3(\n  curr: HandleItem[],\n  next: HandleItem[],\n  step: number,\n  reversed: boolean,\n  getValue: (x: number) => number\n): HandleItem[] {\n  let indexForMovingHandle = -1;\n  let handleMoveIsPositive = true;\n\n  for (let i = 0; i < curr.length; i++) {\n    const c = curr[i];\n    const n = next[i];\n\n    // make sure keys are in same order if not return curr\n    if (!n || n.key !== c.key) {\n      return curr;\n    } else if (n.val !== c.val) {\n      indexForMovingHandle = i;\n      handleMoveIsPositive = n.val - c.val > 0;\n    }\n  }\n\n  // nothing has changed (shouldn't happen but just in case).\n  if (indexForMovingHandle === -1) {\n    return curr;\n  } else {\n    const increment = handleMoveIsPositive ? step : -step;\n\n    for (let i = 0; i < next.length; i++) {\n      const n0 = next[i];\n      const n1 = next[i + 1];\n\n      if (n1 && n0.val === n1.val) {\n        if (i === indexForMovingHandle) {\n          const newStep = n1.val + increment;\n          if (getValue(newStep) === newStep) {\n            const clone = getUpdatedHandles(\n              next,\n              n1.key,\n              n1.val + increment,\n              reversed\n            );\n            const check = mode3(next, clone, step, reversed, getValue);\n\n            if (check === next) {\n              return curr;\n            } else {\n              return check;\n            }\n          } else {\n            return curr;\n          }\n        } else {\n          const newStep = n0.val + increment;\n          if (getValue(newStep) === newStep) {\n            const clone = getUpdatedHandles(\n              next,\n              n0.key,\n              n0.val + increment,\n              reversed\n            );\n            const check = mode3(next, clone, step, reversed, getValue);\n\n            if (check === next) {\n              return curr;\n            } else {\n              return check;\n            }\n          } else {\n            return curr;\n          }\n        }\n      }\n    }\n  }\n\n  return next;\n}\n","export function callAll<T>(...fns: (((e: T) => void) | undefined)[]) {\n  return (e: T) => {\n    return fns.forEach(fn => fn && fn(e));\n  };\n}\n","import React, { Component } from 'react';\nimport { callAll } from '../utils';\n\nimport { OtherProps } from '../types';\nimport { RailProps } from './types';\n\nconst NOOP = () => ({ value: 0, percent: 0 });\n\nexport class Rail extends Component<RailProps> {\n  getRailProps = (props: OtherProps = {}) => {\n    const { emitMouse, emitTouch } = this.props;\n\n    return {\n      ...props,\n      onMouseDown: callAll<React.MouseEvent<Element>>(\n        props && props.onMouseDown,\n        emitMouse\n      ),\n      onTouchStart: callAll(props && props.onTouchStart, emitTouch),\n    };\n  };\n\n  render() {\n    const {\n      getRailProps,\n      props: { getEventData, activeHandleID = '', children },\n    } = this;\n\n    const renderedChildren = children({\n      getEventData: getEventData || NOOP,\n      activeHandleID,\n      getRailProps,\n    });\n    return renderedChildren && React.Children.only(renderedChildren);\n  }\n}\n","import React, { Component } from 'react';\nimport { callAll } from '../utils';\n\nimport { OtherProps } from '../types';\nimport { HandlesProps } from './types';\n\nexport class Handles extends Component<HandlesProps> {\n  autofocus = (e: React.MouseEvent<Element>) => {\n    if (e.target instanceof HTMLElement) {\n      e.target.focus();\n    }\n  };\n\n  getHandleProps = (id: string, props: OtherProps = {}) => {\n    const { emitKeyboard, emitMouse, emitTouch } = this.props;\n\n    return {\n      ...props,\n      onKeyDown: callAll<React.KeyboardEvent<Element>>(\n        props && props.onKeyDown,\n        (e: React.KeyboardEvent<Element>) => emitKeyboard && emitKeyboard(e, id)\n      ),\n      onMouseDown: callAll<React.MouseEvent<Element>>(\n        props && props.onMouseDown,\n        this.autofocus,\n        (e: React.MouseEvent) => emitMouse && emitMouse(e, id)\n      ),\n      onTouchStart: callAll<React.TouchEvent<Element>>(\n        props && props.onTouchStart,\n        (e: React.TouchEvent<Element>) => emitTouch && emitTouch(e, id)\n      ),\n    };\n  };\n\n  render() {\n    const {\n      getHandleProps,\n      props: { activeHandleID = '', children, handles = [] },\n    } = this;\n\n    const renderedChildren = children({\n      handles,\n      activeHandleID,\n      getHandleProps,\n    });\n\n    return renderedChildren && React.Children.only(renderedChildren);\n  }\n}\n","import { ticks } from 'd3-array';\n\nimport { Interpolator } from '../types';\n\nexport class LinearScale {\n  interpolator: Interpolator | null;\n  domain: number[] = [0, 1];\n  range: number[] = [0, 1];\n\n  constructor() {\n    this.domain = [0, 1];\n    this.range = [0, 1];\n    this.interpolator = null;\n  }\n\n  createInterpolator(domain: number[], range: number[]) {\n    const d0 = domain[0];\n    const d1 = domain[1];\n\n    const r0 = range[0];\n    const r1 = range[1];\n\n    if (d1 < d0) {\n      return (x: number) =>\n        this.interpolateValue(r1, r0)(this.deinterpolateValue(d1, d0)(x));\n    } else {\n      return (x: number) =>\n        this.interpolateValue(r0, r1)(this.deinterpolateValue(d0, d1)(x));\n    }\n  }\n\n  interpolateValue(a: number, b: number) {\n    return (\n      (a = +a),\n      (b -= a),\n      function i(t: number) {\n        return a + b * t;\n      }\n    );\n  }\n\n  deinterpolateValue(a: number, b: number) {\n    return (b -= a = +a) ? (x: number) => (x - a) / b : () => b;\n  }\n\n  rescale() {\n    this.interpolator = null;\n\n    return this;\n  }\n\n  getValue(x: number) {\n    const { domain, range } = this;\n\n    return (\n      this.interpolator ||\n      (this.interpolator = this.createInterpolator(domain, range))\n    )(+x);\n  }\n\n  setDomain(val: number[]) {\n    this.domain = [val[0], val[1]];\n\n    this.rescale();\n\n    return this;\n  }\n\n  getDomain() {\n    return this.domain;\n  }\n\n  setRange(val: number[]) {\n    this.range = [val[0], val[1]];\n\n    return this;\n  }\n\n  getRange() {\n    return this.range;\n  }\n\n  getTicks(count: number) {\n    const d = this.domain;\n    return ticks(d[0], d[d.length - 1], count ? count : 10);\n  }\n}\n","import React, { Component } from 'react';\n\nimport { TicksProps } from './types';\nimport { LinearScale } from '../scales/LinearScale';\n\nconst defaultGetEventData = () => ({ value: 0, percent: 0 });\n\nexport class Ticks extends Component<TicksProps> {\n  public render() {\n    const {\n      children,\n      values,\n      minValue = 0,\n      scale = new LinearScale(),\n      count = 10,\n      getEventData = defaultGetEventData,\n      activeHandleID = '',\n    } = this.props;\n\n    const ticks = (values ? values : scale.getTicks(count)).map((value) => ({\n      id: `$$-${value}`,\n      value: value <= minValue ? minValue : value,\n      percent: scale.getValue(value),\n    }));\n\n    const renderedChildren = children({ getEventData, activeHandleID, ticks });\n    return renderedChildren && React.Children.only(renderedChildren);\n  }\n}\n","import React, { Component } from 'react';\n\nimport { callAll } from '../utils';\nimport { LinearScale } from '../scales/LinearScale';\nimport { TracksProps } from './types';\nimport { OtherProps } from '../types';\n\nconst defaultGetEventData = () => ({ value: 0, percent: 0 });\n\nexport class Tracks extends Component<TracksProps> {\n  getTrackProps = (props?: OtherProps) => {\n    const { emitMouse, emitTouch } = this.props;\n\n    return {\n      ...(props || {}),\n      onMouseDown: callAll<React.MouseEvent<Element>>(\n        props && props.onMouseDown,\n        emitMouse\n      ),\n      onTouchStart: callAll<React.TouchEvent<Element>>(\n        props && props.onTouchStart,\n        emitTouch\n      ),\n    };\n  };\n\n  render() {\n    const {\n      getTrackProps,\n      props: {\n        children,\n        left = true,\n        right = true,\n        scale = new LinearScale(),\n        handles = [],\n        getEventData = defaultGetEventData,\n        activeHandleID = '',\n      },\n    } = this;\n\n    const domain = scale.getDomain();\n    const tracks = [];\n\n    for (let i = 0; i < handles.length + 1; i++) {\n      let source = handles[i - 1];\n      let target = handles[i];\n\n      if (i === 0 && left === true) {\n        source = { id: '$', value: domain[0], percent: 0 };\n      } else if (i === handles.length && right === true) {\n        target = { id: '$', value: domain[1], percent: 100 };\n      }\n\n      if (source && target) {\n        tracks.push({\n          id: `${source.id}-${target.id}`,\n          source,\n          target,\n        });\n      }\n    }\n\n    const renderedChildren = children({\n      getEventData,\n      activeHandleID,\n      tracks,\n      getTrackProps,\n    });\n\n    return renderedChildren && React.Children.only(renderedChildren);\n  }\n}\n","function clamp(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max);\n}\n\nexport class DiscreteScale {\n  step: number = 1;\n  domain: number[] = [0, 1];\n  range: number[] = [0, 1];\n\n  setDomain = (val: number[]) => {\n    this.domain = [val[0], val[1]];\n\n    return this;\n  };\n\n  setRange = (val: number[]) => {\n    this.range = [val[0], val[1]];\n\n    return this;\n  };\n\n  setStep = (val: number) => {\n    this.step = val;\n\n    return this;\n  };\n\n  getValue = (x: number) => {\n    const {\n      domain: [d0, d1],\n      range: [r0, r1],\n      step,\n    } = this;\n\n    const slideLength = r1 - r0;\n    const fullSteps = Math.floor(slideLength / step) * step;\n    const rest = slideLength - fullSteps;\n\n    if ((r1 - r0) * (x - d0) / (d1 - d0) > (fullSteps + Math.round(0.5 * rest))) return r1;\n\n    const p = (clamp(x, d0, d1) - d0) / (d1 - d0);\n    const b = step * Math.round((p * (r1 - r0)) / step) + r0;\n\n    return clamp(b, r0 < r1 ? r0 : r1, r1 > r0 ? r1 : r0);\n  };\n}\n","import React, { PureComponent, isValidElement } from 'react';\nimport warning from 'warning';\nimport { mode1, mode2, mode3 } from './modes';\nimport {\n  isNotValidTouch,\n  getTouchPosition,\n  getUpdatedHandles,\n  getSliderDomain,\n  getHandles,\n  prfx,\n} from './utils';\nimport { Rail } from '../Rail';\nimport { Handles } from '../Handles';\nimport { Ticks } from '../Ticks';\nimport { Tracks } from '../Tracks';\nimport { LinearScale } from '../scales/LinearScale';\nimport { DiscreteScale } from '../scales/DiscreteScale';\n\nimport { SliderProps, SliderState } from './types';\nimport { HandleItem } from '../types';\n\nconst isBrowser =\n  typeof window !== 'undefined' && typeof document !== 'undefined';\n\nconst noop = () => {};\n\nconst compare = (b: any[]) => (m: any, d: any, i: number) => m && b[i] === d;\n\nconst equal = (a: any, b: any) => {\n  return a === b || (a.length === b.length && a.reduce(compare(b), true));\n};\n\ninterface RCSComponent {\n  type: {\n    name: 'Rail' | 'Handles' | 'Ticks' | 'Tracks';\n  };\n}\n\nconst isRCSComponent = (item: React.ReactNode): item is RCSComponent => {\n  if (!isValidElement(item)) {\n    return false;\n  }\n\n  const type = (item as RCSComponent).type;\n  const name = type ? type.name : '';\n\n  return (\n    name === Handles.name ||\n    name === Rail.name ||\n    name === Ticks.name ||\n    name === Tracks.name\n  );\n};\n\nconst getNextValue = (\n  curr: number,\n  step: number,\n  domain: ReadonlyArray<number>,\n  reversed: boolean\n) => {\n  const newVal = reversed ? curr - step : curr + step;\n  return reversed ? Math.max(domain[0], newVal) : Math.min(domain[1], newVal);\n};\n\nconst getPrevValue = (\n  curr: number,\n  step: number,\n  domain: ReadonlyArray<number>,\n  reversed: boolean\n) => {\n  const newVal = reversed ? curr + step : curr - step;\n  return reversed ? Math.min(domain[1], newVal) : Math.max(domain[0], newVal);\n};\n\nconst defaultDomain = [0, 100];\n\nexport class Slider<\n  T extends HTMLDivElement = HTMLDivElement\n> extends PureComponent<SliderProps, SliderState> {\n  state = {\n    step: 0.1,\n    values: [],\n    domain: defaultDomain,\n    handles: [] as HandleItem[],\n    reversed: false,\n    activeHandleID: '',\n    valueToPerc: null,\n    valueToStep: null,\n    pixelToStep: null,\n  };\n\n  slider = React.createRef<T>();\n\n  static getDerivedStateFromProps(\n    nextProps: SliderProps,\n    prevState: SliderState\n  ) {\n    const {\n      step = 0.1,\n      values,\n      domain = defaultDomain,\n      reversed = false,\n      onUpdate = noop,\n      onChange = noop,\n      warnOnChanges = false,\n    } = nextProps;\n    let valueToPerc = prevState.valueToPerc;\n    let valueToStep = prevState.valueToStep;\n    let pixelToStep = prevState.pixelToStep;\n\n    const nextState: Partial<SliderState> = {};\n\n    if (!valueToPerc || !valueToStep || !pixelToStep) {\n      valueToPerc = new LinearScale();\n      valueToStep = new DiscreteScale();\n      pixelToStep = new DiscreteScale();\n\n      nextState.valueToPerc = valueToPerc;\n      nextState.valueToStep = valueToStep;\n      nextState.pixelToStep = pixelToStep;\n    }\n\n    if (\n      prevState.domain === defaultDomain ||\n      prevState.step === null ||\n      prevState.domain === null ||\n      prevState.reversed === null ||\n      step !== prevState.step ||\n      domain[0] !== prevState.domain[0] ||\n      domain[1] !== prevState.domain[1] ||\n      reversed !== prevState.reversed\n    ) {\n      const [min, max] = domain;\n      valueToStep.setStep(step).setRange([min, max]).setDomain([min, max]);\n\n      if (reversed === true) {\n        valueToPerc.setDomain([min, max]).setRange([100, 0]);\n        pixelToStep.setStep(step).setRange([max, min]);\n      } else {\n        valueToPerc.setDomain([min, max]).setRange([0, 100]);\n        pixelToStep.setStep(step).setRange([min, max]);\n      }\n\n      warning(\n        max > min,\n        `${prfx} Max must be greater than min (even if reversed). Max is ${max}. Min is ${min}.`\n      );\n\n      const { handles, changes } = getHandles(\n        values || prevState.values,\n        reversed,\n        valueToStep,\n        warnOnChanges\n      );\n\n      if (changes || values === undefined || values === prevState.values) {\n        onUpdate(handles.map((d) => d.val));\n        onChange(handles.map((d) => d.val));\n      }\n\n      nextState.step = step;\n      nextState.values = values;\n      nextState.domain = domain === defaultDomain ? [...domain] : domain;\n      nextState.handles = handles;\n      nextState.reversed = reversed;\n    } else if (!equal(values, prevState.values)) {\n      const { handles, changes } = getHandles(\n        values,\n        reversed,\n        valueToStep,\n        warnOnChanges\n      );\n\n      if (changes) {\n        onUpdate(handles.map((d) => d.val));\n        onChange(handles.map((d) => d.val));\n      }\n\n      nextState.values = values;\n      nextState.handles = handles;\n    }\n\n    if (Object.keys(nextState).length) {\n      return nextState;\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    const { pixelToStep } = this.state;\n    const { vertical } = this.props;\n\n    // @ts-ignore\n    pixelToStep.setDomain(getSliderDomain(this.slider.current, vertical));\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  removeListeners() {\n    if (isBrowser) {\n      document.removeEventListener('mousemove', this.onMouseMove);\n      document.removeEventListener('mouseup', this.onMouseUp);\n      document.removeEventListener('touchmove', this.onTouchMove);\n      document.removeEventListener('touchend', this.onTouchEnd);\n    }\n  }\n\n  onKeyDown = (e: KeyboardEvent, handleID: string) => {\n    let validUpKeys = ['ArrowRight', 'ArrowUp'];\n    let validDownKeys = ['ArrowDown', 'ArrowLeft'];\n\n    const {\n      state: { handles },\n      props: {\n        step = 0.1,\n        reversed = false,\n        vertical = false,\n        domain = [0, 100] as number[],\n      },\n    } = this;\n    const key = e.key || `${e.keyCode}`;\n\n    if (!validUpKeys.concat(validDownKeys).includes(key)) {\n      return;\n    }\n\n    if (vertical) {\n      [validUpKeys, validDownKeys] = [validDownKeys, validUpKeys];\n    }\n\n    e.stopPropagation && e.stopPropagation();\n    e.preventDefault && e.preventDefault();\n\n    const found = handles.find((value) => {\n      return value.key === handleID;\n    });\n\n    if (!found) {\n      return;\n    }\n\n    const currVal = found.val;\n    let newVal = currVal;\n\n    if (validUpKeys.includes(key)) {\n      newVal = getNextValue(currVal, step, domain, reversed);\n    } else if (validDownKeys.includes(key)) {\n      newVal = getPrevValue(currVal, step, domain, reversed);\n    }\n    const nextHandles = handles.map((v) =>\n      v.key === handleID ? { key: v.key, val: newVal } : v\n    );\n\n    this.submitUpdate(nextHandles, true);\n  };\n\n  onMouseDown = (e: MouseEvent, handleID: string) => {\n    this.onStart(e, handleID, false);\n  };\n\n  onTouchStart = (e: TouchEvent, handleID: string) => {\n    if (isNotValidTouch(e)) {\n      return;\n    }\n\n    this.onStart(e, handleID, true);\n  };\n\n  onStart(e: MouseEvent | TouchEvent, handleID: string, isTouch: boolean) {\n    const {\n      state: { handles },\n      props: { onSlideStart = noop },\n    } = this;\n\n    if (!isTouch) {\n      e.preventDefault && e.preventDefault();\n    }\n\n    e.stopPropagation && e.stopPropagation();\n\n    const found = handles.find((value) => {\n      return value.key === handleID;\n    });\n\n    if (found) {\n      this.setState({ activeHandleID: handleID });\n      onSlideStart(\n        handles.map((d) => d.val),\n        { activeHandleID: handleID }\n      );\n      isTouch ? this.addTouchEvents() : this.addMouseEvents();\n    } else {\n      this.setState({ activeHandleID: '' });\n      this.handleRailAndTrackClicks(e, isTouch);\n    }\n  }\n\n  handleRailAndTrackClicks(e: MouseEvent | TouchEvent, isTouch: boolean) {\n    const {\n      state: { handles: curr, pixelToStep },\n      props: { vertical, reversed = false },\n    } = this;\n    const { slider } = this;\n\n    // double check the dimensions of the slider\n    // @ts-ignore\n    pixelToStep.setDomain(getSliderDomain(slider.current, vertical));\n\n    // find the closest value (aka step) to the event location\n    let updateValue: number;\n\n    if (isTouch) {\n      // @ts-ignore\n      updateValue = pixelToStep.getValue(getTouchPosition(vertical, e));\n    } else {\n      // @ts-ignore\n      updateValue = pixelToStep.getValue(vertical ? e.clientY : e.pageX);\n    }\n\n    // find the closest handle key\n    let updateKey = '';\n    let minDiff = Infinity;\n\n    for (let i = 0; i < curr.length; i++) {\n      const { key, val } = curr[i];\n      const diff = Math.abs(val - updateValue);\n\n      if (diff < minDiff) {\n        updateKey = key;\n        minDiff = diff;\n      }\n    }\n\n    // generate a \"candidate\" set of values - a suggestion of what to do\n    const nextHandles = getUpdatedHandles(\n      curr,\n      updateKey,\n      updateValue,\n      reversed\n    );\n\n    // submit the candidate values\n    this.setState({ activeHandleID: updateKey }, () => {\n      this.submitUpdate(nextHandles, true);\n      isTouch ? this.addTouchEvents() : this.addMouseEvents();\n    });\n  }\n\n  getEventData = (e: React.MouseEvent | React.TouchEvent, isTouch: boolean) => {\n    const {\n      state: { pixelToStep, valueToPerc },\n      props: { vertical },\n    } = this;\n\n    // double check the dimensions of the slider\n    // @ts-ignore\n    pixelToStep.setDomain(getSliderDomain(this.slider.current, vertical));\n\n    let value;\n\n    if (isTouch && e instanceof TouchEvent) {\n      // @ts-ignore\n      value = pixelToStep.getValue(getTouchPosition(vertical, e));\n    } else if (e instanceof MouseEvent) {\n      // @ts-ignore\n      value = pixelToStep.getValue(vertical ? e.clientY : e.pageX);\n    }\n    return {\n      value,\n      // @ts-ignore\n      percent: valueToPerc.getValue(value),\n    };\n  };\n\n  addMouseEvents() {\n    if (isBrowser) {\n      document.addEventListener('mousemove', this.onMouseMove);\n      document.addEventListener('mouseup', this.onMouseUp);\n    }\n  }\n\n  addTouchEvents() {\n    if (isBrowser) {\n      document.addEventListener('touchmove', this.onTouchMove);\n      document.addEventListener('touchend', this.onTouchEnd);\n    }\n  }\n\n  onMouseMove = (e: MouseEvent) => {\n    const {\n      state: { handles: curr, pixelToStep, activeHandleID = '' },\n      props: { vertical, reversed = false },\n    } = this;\n    // double check the dimensions of the slider\n    // @ts-ignore\n    pixelToStep.setDomain(getSliderDomain(this.slider.current, vertical));\n\n    // find the closest value (aka step) to the event location\n    // @ts-ignore\n    const updateValue = pixelToStep.getValue(vertical ? e.clientY : e.pageX);\n\n    // generate a \"candidate\" set of values - a suggestion of what to do\n    const nextHandles = getUpdatedHandles(\n      curr,\n      activeHandleID,\n      updateValue,\n      reversed\n    );\n\n    // submit the candidate values\n    this.submitUpdate(nextHandles);\n  };\n\n  onTouchMove = (e: TouchEvent) => {\n    const {\n      state: { handles: curr, pixelToStep, activeHandleID },\n      props: { vertical, reversed },\n    } = this;\n    if (pixelToStep === null || isNotValidTouch(e)) {\n      return;\n    }\n\n    // double check the dimensions of the slider\n    // @ts-ignore\n    pixelToStep.setDomain(getSliderDomain(this.slider.current, vertical));\n\n    // find the closest value (aka step) to the event location\n    // @ts-ignore\n    const updateValue = pixelToStep.getValue(getTouchPosition(vertical, e));\n\n    // generate a \"candidate\" set of values - a suggestion of what to do\n    const nextHandles = getUpdatedHandles(\n      curr,\n      activeHandleID,\n      updateValue,\n      reversed\n    );\n\n    // submit the candidate values\n    this.submitUpdate(nextHandles);\n  };\n\n  submitUpdate(next: HandleItem[], callOnChange = false) {\n    const {\n      mode = 1,\n      step = 0.1,\n      onUpdate = noop,\n      onChange = noop,\n      reversed = false,\n    } = this.props;\n    //@ts-ignore\n    const { getValue } = this.state.valueToStep;\n\n    this.setState(({ handles: curr }) => {\n      let handles: HandleItem[] = [];\n\n      // given the current handles and a candidate set, decide what to do\n      if (typeof mode === 'function') {\n        handles = mode(curr, next, step, reversed, getValue);\n        warning(\n          Array.isArray(handles),\n          'Custom mode function did not return an array.'\n        );\n      } else {\n        switch (mode) {\n          case 1:\n            handles = mode1(curr, next);\n            break;\n          case 2:\n            handles = mode2(curr, next);\n            break;\n          case 3:\n            handles = mode3(curr, next, step, reversed, getValue);\n            break;\n          default:\n            handles = next;\n            warning(false, `${prfx} Invalid mode value.`);\n        }\n      }\n\n      onUpdate(handles.map((d) => d.val));\n\n      if (callOnChange) {\n        onChange(handles.map((d) => d.val));\n      }\n\n      return { handles };\n    });\n  }\n\n  onMouseUp = () => {\n    const {\n      state: { handles = [], activeHandleID },\n      props: { onChange = noop, onSlideEnd = noop },\n    } = this;\n\n    onChange(handles.map((d) => d.val));\n    onSlideEnd(\n      handles.map((d) => d.val),\n      { activeHandleID }\n    );\n\n    this.setState({ activeHandleID: '' });\n\n    if (isBrowser) {\n      document.removeEventListener('mousemove', this.onMouseMove);\n      document.removeEventListener('mouseup', this.onMouseUp);\n    }\n  };\n\n  onTouchEnd = () => {\n    const {\n      state: { handles, activeHandleID },\n      props: { onChange = noop, onSlideEnd = noop },\n    } = this;\n\n    onChange(handles.map((d) => d.val));\n    onSlideEnd(\n      handles.map((d) => d.val),\n      { activeHandleID }\n    );\n\n    this.setState({ activeHandleID: '' });\n\n    if (isBrowser) {\n      document.removeEventListener('touchmove', this.onTouchMove);\n      document.removeEventListener('touchend', this.onTouchEnd);\n    }\n  };\n\n  render() {\n    const {\n      state: { handles, valueToPerc, activeHandleID },\n      props: {\n        className,\n        rootStyle = {},\n        rootProps = {},\n        component: Comp = 'div',\n        disabled = false,\n        flatten = false,\n      },\n    } = this;\n\n    const mappedHandles = handles.map(({ key, val }) => {\n      // @ts-ignore\n      return { id: key, value: val, percent: valueToPerc.getValue(val) };\n    });\n\n    const children = React.Children.map(this.props.children, (child) => {\n      if (isRCSComponent(child) === true) {\n        return React.cloneElement(child as React.ReactElement, {\n          scale: valueToPerc,\n          handles: mappedHandles,\n          activeHandleID,\n          getEventData: this.getEventData,\n          emitKeyboard: disabled ? noop : this.onKeyDown,\n          emitMouse: disabled ? noop : this.onMouseDown,\n          emitTouch: disabled ? noop : this.onTouchStart,\n        });\n      } else {\n        return child;\n      }\n    });\n\n    return flatten ? (\n      <>\n        {React.createElement(Comp, {\n          ...rootProps,\n          style: rootStyle,\n          className: className,\n          ref: this.slider,\n        })}\n        {children}\n      </>\n    ) : (\n      <>\n        {React.createElement(\n          Comp,\n          {\n            ...rootProps,\n            style: rootStyle,\n            className: className,\n            ref: this.slider,\n          },\n          children\n        )}\n      </>\n    );\n  }\n}\n"],"names":["prfx","getSortByVal","reversed","a","b","val","getUpdatedHandles","handles","updateKey","updateValue","index","findIndex","v","key","slice","sort","getSliderDomain","slider","vertical","s","getBoundingClientRect","top","left","bottom","right","isNotValidTouch","type","touches","length","toLowerCase","getTouchPosition","e","clientY","pageX","getHandles","values","valueToStep","warn","changes","map","x","getValue","warning","i","mode1","_","next","mode2","curr","mode3","step","indexForMovingHandle","handleMoveIsPositive","c","n","increment","n0","n1","newStep","check","callAll","fns","forEach","fn","NOOP","value","percent","Rail","Component","getRailProps","props","_this","emitMouse","emitTouch","onMouseDown","onTouchStart","render","this","activeHandleID","renderedChildren","children","getEventData","React","Children","only","Handles","autofocus","target","HTMLElement","focus","getHandleProps","id","emitKeyboard","onKeyDown","LinearScale","constructor","interpolator","domain","range","createInterpolator","d0","d1","r0","r1","interpolateValue","deinterpolateValue","t","rescale","setDomain","getDomain","setRange","getRange","getTicks","count","d","ticks","defaultGetEventData","Ticks","minValue","scale","Tracks","getTrackProps","tracks","source","push","clamp","min","max","Math","DiscreteScale","setStep","slideLength","fullSteps","floor","round","p","isBrowser","window","document","noop","defaultDomain","PureComponent","state","valueToPerc","pixelToStep","createRef","handleID","validUpKeys","validDownKeys","keyCode","concat","includes","stopPropagation","preventDefault","found","find","currVal","newVal","getNextValue","getPrevValue","nextHandles","submitUpdate","onStart","isTouch","current","TouchEvent","MouseEvent","onMouseMove","onTouchMove","onMouseUp","onChange","onSlideEnd","setState","removeEventListener","onTouchEnd","nextProps","prevState","onUpdate","warnOnChanges","nextState","undefined","reduce","m","compare","Object","keys","componentDidMount","componentWillUnmount","removeListeners","onSlideStart","addTouchEvents","addMouseEvents","handleRailAndTrackClicks","minDiff","Infinity","diff","abs","addEventListener","callOnChange","mode","Array","isArray","className","rootStyle","rootProps","component","Comp","disabled","flatten","mappedHandles","child","item","isValidElement","name","isRCSComponent","cloneElement","createElement","style","ref"],"mappings":"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"}